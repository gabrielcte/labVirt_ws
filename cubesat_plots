import jsbsim
import time
from pathlib                import Path
import numpy                as np
from enum                   import Enum
import matplotlib.pyplot    as plt
import matplotlib.image     as mpimg
import pandas               as pd


df = pd.read_csv('CubesatOut.csv')



plt.figure(0)
plt.title('Ground Track')
plt.plot(df['/fdm/jsbsim/position/long-gc-deg'], df['/fdm/jsbsim/position/lat-geod-deg'],':b')

# Ler a imagem

contour = mpimg.imread('mapaContorno.jpg')
# Configurar a exibição da imagem

plt.imshow(contour, extent=[-180, 180, -90, 90], cmap='gray')

# Configurar os rótulos dos eixos
plt.xlabel("Longitude")
plt.ylabel("Latitude")

# Definir limites dos eixos
plt.xlim([-180, 180])
plt.ylim([-90, 90])

# Definir as marcações dos eixos x
plt.xticks([-180, -150, -120, -90, -60, -30, 0, 30, 60, 90, 120, 150, 180],
        ['180W', '150W', '120W', '90W', '60W', '30W', '0', '30E', '60E', '90E', '120E', '150E', '180E'])

# Definir as marcações dos eixos y
plt.yticks([90, 75, 60, 45, 30, 15, 0, -15, -30, -45, -60, -75, -90],
        ['90N', '75N', '60N', '45N', '30N', '15N', '0', '15S', '30S', '45S', '60S', '75S', '90S'])

# Configurar a grade e proporções iguais
plt.axis('on')
plt.axis('equal')
plt.grid(True)


plt.figure(1)
plt.plot(df['Time'], np.rad2deg(df['/fdm/jsbsim/attitude/phi-rad']),':b')
plt.plot(df['Time'], np.rad2deg(df['/fdm/jsbsim/attitude/theta-rad']),':r')
plt.plot(df['Time'], np.rad2deg(df['/fdm/jsbsim/attitude/psi-rad']),':g')
plt.xlabel('Time [sec]')
plt.ylabel('Attitude [Deg]')
plt.title('Evolução da Atitude do Cubesat 6U')
plt.grid()

plt.figure(2)
plt.plot(df['Time'], np.rad2deg(df['/fdm/jsbsim/velocities/phidot-rad_sec']),':b')
plt.plot(df['Time'], np.rad2deg(df['/fdm/jsbsim/velocities/thetadot-rad_sec']),':r')
plt.plot(df['Time'], np.rad2deg(df['/fdm/jsbsim/velocities/psidot-rad_sec']),':g')
plt.xlabel('Time [sec]')
plt.ylabel('Velocidade Angular [Deg/sec]')
plt.title('Velocidade Angular do Cubesat 6U')
plt.grid()

plt.figure(3)
plt.plot(df['Time'], df['/fdm/jsbsim/attitude/phi-rad'],':b')
plt.plot(df['Time'], df['/fdm/jsbsim/attitude/theta-rad'],':r')
plt.plot(df['Time'], df['/fdm/jsbsim/attitude/psi-rad'],':g')
plt.xlabel('Time [sec]')
plt.ylabel('Attitude [Deg]')
plt.title('Evolução da Atitude do Cubesat 6U')
plt.grid()

plt.figure(4)
plt.plot(df['Time'], np.rad2deg(df['/fdm/jsbsim/velocities/phidot-rad_sec']),':b')
plt.plot(df['Time'], np.rad2deg(df['/fdm/jsbsim/velocities/thetadot-rad_sec']),':r')
plt.plot(df['Time'], np.rad2deg(df['/fdm/jsbsim/velocities/psidot-rad_sec']),':g')
plt.xlabel('Time [sec]')
plt.ylabel('Velocidade Angular [Deg/sec]')
plt.title('Velocidade Angular do Cubesat 6U')
plt.grid()

# Mostrar a imagem
plt.show()
