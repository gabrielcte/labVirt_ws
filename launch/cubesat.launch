<launch>

  <!-- Load joint controller configurations from YAML file to parameter server -->
  <rosparam file="$(find rrbot_control)/config/rrbot_control.yaml" command="load"/>

  <!-- load the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="/rrbot" args="joint1_position_controller joint2_position_controller joint_state_controller"/>

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen">
    <remap from="/joint_states" to="/rrbot/joint_states" />
  </node>



	<arg name="gui" default="true"/>
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find quad_ufabc)/worlds/quad.world" />
		<arg name="paused" default="false" />
		<arg name="use_sim_time" default="true" />
		<arg name="gui" value="$(arg gui)" />
		<arg name="headless" default="true" />
		<arg name="debug" default="false" />
		<arg name="verbose" default="true" />
	</include>
	
	<!-- Load joint controller configurations from YAML file to parameter server -->
	<rosparam file="$(find quad_ufabc)/config/quad_control.yaml" command="load"/>

	<!-- load the controllers -->
	<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
		output="screen" args="--namespace=/quad joint_state_controller joint_motor_controller"/>

	<group ns="quad">

		<param name="robot_description" command="$(find xacro)xacro  '$(find quad_ufabc)/urdf/quad_teste.xacro'"/>
		
		<arg name="x" default="0.6"/>
    		<arg name="y" default="0"/>
    		<arg name="z" default="0"/>
    		<arg name="roll" default="0"/>
  		<arg name="pitch" default="0"/>
  		<arg name="yaw" default="0"/>
		
		<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-param robot_description -urdf -model quad -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)" />

		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
			<param name="publish_frequency" type="double" value="1000.0" />
		</node>
		
	</group>
	
	<!--
	<group ns="aruco">
	
		<param name="aruco_description" command="$(find xacro)xacro  '$(find quad_ufabc)/urdf/aruco.xacro'"/>
		
		<arg name="x" default="0"/>
    		<arg name="y" default="0.0"/>
    		<arg name="z" default="0"/>
    		<arg name="roll" default="0.0"/>
  		<arg name="pitch" default="0.0"/>
  		<arg name="yaw" default="0.0"/>
		
		<node name="aruco_spawn" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-param aruco_description -urdf -model aruco -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)" />
	
	</group>
	
	
	<group ns="camera">
	
		<param name="camera_description" command="$(find xacro)xacro  '$(find quad_ufabc)/urdf/camera.xacro'"/>
		
		<arg name="x" default="-2"/>
    		<arg name="y" default="-2"/>
    		<arg name="z" default="3.5"/>
    		<arg name="roll" default="0.0"/>
  		<arg name="pitch" default="0.650000"/>
  		<arg name="yaw" default="0.720799"/>
		
		<node name="camera_spawn" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-param camera_description -urdf -model camera -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)" />
		
	
	</group>
	
	 <group ns="camera2">
	
		<param name="camera2_description" command="$(find xacro)xacro  '$(find quad_ufabc)/urdf/camera2.xacro'"/>
		
		<arg name="x" default="2.5"/>
    		<arg name="y" default="2.5"/>
    		<arg name="z" default="3.5"/>
    		<arg name="roll" default="0.0"/>
  		<arg name="pitch" default="0.650000"/>
  		<arg name="yaw" default="-2.170800"/>
		
		<node name="camera2_spawn" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-param camera2_description -urdf -model camera2 -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)" />
		
	
	</group> 
-->

</launch>
